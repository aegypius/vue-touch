{"version":3,"file":"vue-touch.js","sources":["../src/utils.js","../src/component.js","../src/index.js"],"sourcesContent":["import Hammer from 'hammerjs' // used by guardDirections\n\n/**\n * Tiny Object.assign replacement\n * @param  {Object} target  Any type of object\n * @param  {Object} sources Any type of object\n * @return {Object}         Merged Object\n */\nexport function assign(target, ...sources) {\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n    const keys = Object.keys(source)\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n      target[key] = source[key]\n    }\n  }\n  return target\n}\n\n/**\n * Small helper method to generate prop options for all the\n * *-options props.\n * @return {[type]} [description]\n */\nexport function createProp() {\n  return {\n    type: Object,\n    default: function() { return {} }\n  }\n}\n\nexport function capitalize (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\n/**\n * Directions that VueTouch understands.\n * Will be tanslated to Hammer-style directions by guardDirections()\n * @type {Array}\n */\nexport const directions = ['up', 'down', 'left', 'right', 'horizontal', 'vertical', 'all']\n\n/**\n * Translates VueTouch direction names into Hammer Direction numbers.\n * @param  {Objects} options Hammer Options\n * @return {Object}         [Hammer Options]\n */\nexport function guardDirections (options) {\n  var dir = options.direction\n  if (typeof dir === 'string') {\n    var hammerDirection = 'DIRECTION_' + dir.toUpperCase()\n    if (directions.indexOf(dir) > -1 && Hammer.hasOwnProperty(hammerDirection)) {\n      options.direction = Hammer[hammerDirection]\n    } else {\n      console.warn('[vue-touch] invalid direction: ' + dir)\n    }\n  }\n  return options\n}\n\n/**\n * This pobject will contain global options for recognizers\n * see index.js -> vueTouch.config\n * @type {Object}\n */\nexport const config = {\n\n}\n\n/**\n * This object will contain recognizer options for custom events.\n * see index.js -> registerCustomEvent\n * @type {Object}\n */\nexport const customEvents = {\n\n}\n\n/**\n * Names of all the builtin gestures of Hammer\n * @type {Array}\n */\nexport const gestures = [\n  'pan','panstart','panmove','panend','pancancel','panleft','panright','panup','pandown',\n  'pinch','pinchstart','pinchmove','pinchend','pinchcancel','pinchin','pinchout',\n  'press','pressup',\n  'rotate','rotatestart','rotatemove','rotateend','rotatecancel',\n  'swipe','swipeleft','swiperight','swipeup','swipedown',\n  'tap'\n]\n\n/**\n * Maps the gestures to their \"main gesture\" (the name of the recognizer)\n * @type {Object}\n */\nexport const gestureMap = {\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  pinch: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  press: 'press',\n  pressup: 'press',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe',\n  tap: 'tap'\n}\n","import Hammer from 'hammerjs'\n\nimport {\n  createProp,\n  capitalize,\n  guardDirections,\n  gestures,\n  gestureMap,\n  directions,\n  assign,\n  config,\n  customEvents\n} from './utils'\n\nexport default {\n  props: {\n    options: createProp(),\n    tapOptions: createProp(),\n    panOptions: createProp(),\n    pinchOptions: createProp(),\n    pressOptions: createProp(),\n    rotateOptions: createProp(),\n    swipeOptions: createProp(),\n    tag: { type: String, default: 'div' },\n    enabled: {\n      default: true,\n      type: [Boolean, Object],\n\n    }\n  },\n\n  mounted() {\n    if (!this.$isServer) {\n      this.hammer = new Hammer.Manager(this.$el, this.options)\n      this.recognizers = {} // not reactive\n      this.setupBuiltinRecognizers()\n      this.setupCustomRecognizers()\n      this.updateEnabled(this.enabled)\n    }\n  },\n  destroyed() {\n    if (!this.$isServer) {\n      this.hammer.destroy()\n    }\n  },\n\n  watch: {\n    enabled: {\n      deep: true,\n      handler(...args) {\n        this.updateEnabled(...args)\n      }\n    }\n  },\n\n  methods: {\n\n    setupBuiltinRecognizers()  {\n      // Built-in Hammer events\n      // We check weither any event callbacks are registered\n      // for the gesture, and if so, add a Recognizer\n      for (let i = 0; i < gestures.length; i++) {\n        const gesture = gestures[i]\n        if (this._events[gesture]) {\n          // get the main gesture (e.g. 'panstart' -> 'pan')\n          const mainGesture = gestureMap[gesture]\n          //merge global and local options\n          const options = assign({}, (config[mainGesture] || {}), this[`${mainGesture}Options`])\n          // add recognizer for this main gesture\n          this.addRecognizer(mainGesture, options)\n          // register Event Emit for the specific gesture\n          this.addEvent(gesture)\n        }\n      }\n    },\n\n    setupCustomRecognizers() {\n      // Custom events\n      // We get the customGestures and options from the\n      // customEvents object, then basically do the same check\n      // as we did for the built-in events.\n      const gestures = Object.keys(customEvents)\n\n      for (let i = 0; i < gestures.length; i++) {\n\n        const gesture = gestures[i]\n\n        if (this._events[gesture]) {\n          const opts = customEvents[gesture]\n          const localCustomOpts = this[`${gesture}Options`] || {}\n          const options = assign({}, opts, localCustomOpts)\n          this.addRecognizer(gesture, options, {mainGesture: options.type})\n          this.addEvent(gesture)\n        }\n      }\n    },\n\n    /**\n     * Registers a new Recognizer with the manager and saves it on the component\n     * instance\n     * @param {String} gesture     See utils.js -> gestures\n     * @param {Object} options     Hammer options\n     * @param {String} mainGesture if gesture is a custom event name, mapping to utils.js -> gestures\n     */\n    addRecognizer: function addRecognizer(gesture, options, { mainGesture } = {}) {\n      // create recognizer, e.g. new Hammer['Swipe'](options)\n      if (!this.recognizers[gesture]) {\n        const recognizer = new Hammer[capitalize(mainGesture || gesture)](guardDirections(options))\n        this.recognizers[gesture] = recognizer\n        this.hammer.add(recognizer)\n        recognizer.recognizeWith(this.hammer.recognizers)\n      }\n    },\n\n    addEvent(gesture) {\n      this.hammer.on(gesture, (e) => this.$emit(gesture, e))\n    },\n\n    // Enabling / Disabling certain recognizers.\n\n    /**\n     * Called when the `enabled` prop changes, and during mounted()\n     * It enables/disables values according to the value of the `emabled` prop\n     * @param  {Boolean|Object} newVal If an object: { recognizer: true|false }\n     * @param  {Boolean|Object} oldVal The previous value\n     * @return {undefined}\n     */\n    updateEnabled: function updateEnabled(newVal, oldVal) {\n      if (newVal === true) {\n        this.enableAll()\n\n      } else if (newVal === false) {\n        this.disableAll()\n\n      } else if (typeof newVal === 'object') {\n        const keys = Object.keys(newVal)\n\n        for (let i = 0; i < keys.length; i++) {\n          const event = keys[i]\n\n          if (this.recognizers[event]) {\n            newVal[event]\n              ? this.enable(event)\n              : this.disable(event)\n          }\n        }\n      }\n    },\n\n    enable(r) {\n      const recognizer = this.recognizers[r]\n      if (!recognizer.options.enable) {\n        recognizer.set({ enable: true })\n      }\n    },\n    disable(r) {\n      const recognizer = this.recognizers[r]\n      if (recognizer.options.enable) {\n        recognizer.set({ enable: false })\n      }\n    },\n    toggle(r) {\n      const recognizer = this.recognizers[r]\n      if (recognizer) {\n        recognizer.options.enable\n          ? this.disable(r)\n          : this.enable(r)\n      }\n    },\n\n    enableAll(r) {\n      this.toggleAll({ enable: true })\n    },\n    disableAll(r) {\n      this.toggleAll({ enable: false })\n    },\n    toggleAll({ enable }) {\n      const keys = Object.keys(this.recognizers)\n      for (let i = 0; i < keys.length; i++) {\n        const r = this.recognizers[keys[i]]\n        if (r.options.enable !== enable) {\n          r.set({ enable: enable })\n        }\n      }\n    },\n\n    isEnabled(r) {\n      return this.recognizers[r] && this.recognizers[r].options.enable\n    }\n  },\n\n  render(h) {\n    return h(this.tag, {}, this.$slots.default)\n  }\n}\n","import Component from './component'\nimport { assign, config, customEvents } from './utils'\n\nlet installed = false\n\nconst vueTouch = { config, customEvents }\n\n// Plugin API\n// *********\nvueTouch.install = function install(Vue, opts = {}) {\n  const name = opts.name || 'v-touch'\n  Vue.component(name, assign(Component, { name }))\n  installed = true\n}.bind(vueTouch)\n\nvueTouch.registerCustomEvent = function registerCustomEvent(event, options = {}) {\n  if (installed) {\n    console.warn(`\n      [vue-touch]: Custom Event '${event}' couldn't be added to vue-touch.\n      Custom Events have to be registered before installing the plugin.\n      `)\n    return\n  }\n  options.event = event\n  customEvents[event] = options\n  Component.props[`${event}Options`] = {\n    type: Object,\n    default() { return {} }\n  }\n}.bind(vueTouch)\n\nvueTouch.component = Component\n\n// Utilities\n// ********\nexport default vueTouch;\n"],"names":["assign","target","sources","i","length","source","keys","Object","key","createProp","capitalize","str","charAt","toUpperCase","slice","directions","guardDirections","options","dir","direction","hammerDirection","indexOf","Hammer","hasOwnProperty","warn","config","customEvents","gestures","gestureMap","type","String","default","Boolean","$isServer","hammer","Manager","$el","recognizers","setupBuiltinRecognizers","setupCustomRecognizers","updateEnabled","enabled","destroy","gesture","_events","mainGesture","addRecognizer","addEvent","opts","localCustomOpts","recognizer","add","recognizeWith","on","e","$emit","newVal","oldVal","enableAll","disableAll","event","enable","disable","r","set","toggleAll","h","tag","$slots","installed","vueTouch","install","Vue","name","component","Component","bind","registerCustomEvent","props"],"mappings":"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"}